<#@ template language="C#" #>
<Biml xmlns="http://schemas.varigence.com/biml.xsd">

	<!-- configure and name the source connection -->
	<# string loadpatternname = "OleDb.Truncate.Load"; #>
	<# string rootComponentApplicationName  = "Adventure Works BI"; #>
	<# string componentApplicationName = "Adventure Works"; #>
	<# string connectionName  = "Adventure Works"; #>
	<!-- configuration end -->

	
  <Packages>
    <Package Name="Sssidb_SqlServerScrape_<#=rootComponentApplicationName.Replace(" ", "")#>_<#=componentApplicationName.Replace(" ","")#>" ConstraintMode="Linear">
      <Tasks>
        
        <ExecuteSQL Name="Configure Source Component" ConnectionName="SSISDB" ResultSet="None" >
          <DirectInput>EXEC semanticinsight.configure_system_component '<#=componentApplicationName#>'</DirectInput>
        </ExecuteSQL>
        
        <Dataflow Name="Bulk OLEDB AdventureWorks Table Metadata">
          <Transformations>
            
            <OleDbSource Name="<#=componentApplicationName#> Data Object" ConnectionName="<#=connectionName#>">
			  <DirectInput>
select cast('Table' as nvarchar(50)) as [data_object_type], DB_NAME() as [database],
s.name as [schema], t.name as name, cast('<#=componentApplicationName#>' as nvarchar(50)) as component_application_name,
surrogate_key = cast(('Dw' + t.name + 'Id') as nvarchar(132)),
cast('<#=loadpatternname#>' as nvarchar(200)) as load_pattern_name
from sys.schemas s
join sys.tables t on s.schema_id = t.schema_id

union all

select cast('View' as nvarchar(50)) as [data_object_type], DB_NAME() as [database],
s.name as [schema], t.name as name, cast('<#=componentApplicationName#>' as nvarchar(50)) as component_application_name,
surrogate_key = cast(('Dw' + t.name + 'Id') as nvarchar(132)),
cast('<#=loadpatternname#>' as nvarchar(200)) as load_pattern_name
from sys.schemas s
join sys.views t on s.schema_id = t.schema_id

union all

select
cast('StoredProcedure' as nvarchar(50)) as [data_object_type], DB_NAME() as [database],
s.name as [schema], t.name as name, cast('<#=componentApplicationName#>' as nvarchar(50)) as component_application_name,
surrogate_key = cast(('Dw' + t.name + 'Id') as nvarchar(132)),
cast('<#=loadpatternname#>' as nvarchar(200)) as load_pattern_name
from sys.schemas s
join sys.procedures t on s.schema_id = t.schema_id;
			  </DirectInput>
            </OleDbSource>

			<Lookup Name="Lookup System Component" CacheConnectionName="SSISDB" NoMatchBehavior="RedirectRowsToNoMatchOutput" >
              <DirectInput>
select ds.data_schema_id, c.component_application_name, [database_name], [schema_name]
from semanticinsight.system_component c
join semanticinsight.system_component rc on c.root_system_component_id = rc.system_component_id
join semanticinsight.data_schema ds on ds.system_component_id = c.system_component_id
where c.component_application_name = '<#=componentApplicationName#>' and rc.component_application_name = '<#=rootComponentApplicationName#>'				  
			  </DirectInput>
              <Inputs>
                <Column SourceColumn="component_application_name" TargetColumn="component_application_name"  />
                <Column SourceColumn="database" TargetColumn="database_name" />
				<Column SourceColumn="schema" TargetColumn="schema_name" />
              </Inputs>
			  <Outputs>
				<Column SourceColumn="data_schema_id" TargetColumn="data_schema_id"></Column>
			  </Outputs>
              <InputPath OutputPathName="<#=componentApplicationName#> Data Object.Output"></InputPath>
            </Lookup>
			  
			<Lookup Name="Lookup Load Pattern" CacheConnectionName="SSISDB" NoMatchBehavior="FailComponent">
				<DirectInput>
select load_pattern_id, load_pattern_name
from semanticinsight.load_pattern
where load_pattern_name = '<#=loadpatternname#>'
				</DirectInput>
				<Inputs>
					<Column SourceColumn="load_pattern_name" TargetColumn="load_pattern_name"  />
				</Inputs>
				<Outputs>
					<Column SourceColumn="load_pattern_id" TargetColumn="load_pattern_id"></Column>
				</Outputs>
				<InputPath OutputPathName="Lookup System Component.Match"></InputPath>
			</Lookup>
			  
			<Lookup Name="Lookup Data Object Type" CacheConnectionName="SSISDB" NoMatchBehavior="FailComponent" >
              <DirectInput>
select
	data_object_type_id,
	data_object_type
from semanticinsight.data_object_type
			  </DirectInput>
              <Inputs>
                <Column SourceColumn="data_object_type" TargetColumn="data_object_type" />
              </Inputs>
			  <Outputs>
				<Column SourceColumn="data_object_type_id" TargetColumn="data_object_type_id"></Column>
			  </Outputs>
              <InputPath OutputPathName="Lookup Load Pattern.Match"></InputPath>
            </Lookup>
			  
			  
            <Lookup Name="Lookup Existing" CacheConnectionName="SSISDB" NoMatchBehavior="RedirectRowsToNoMatchOutput" >
              <DirectInput>
select do.data_schema_id, do.data_object_type_id, do.name 
from semanticinsight.data_object do
join semanticinsight.data_schema ds on do.data_schema_id = ds.data_schema_id
join semanticinsight.system_component sc on ds.system_component_id = sc.system_component_id
join semanticinsight.system_component rsc on rsc.system_component_id = sc.root_system_component_id
where sc.component_application_name = '<#=componentApplicationName#>'
and rsc.component_application_name = '<#=rootComponentApplicationName#>'
			  </DirectInput>
              <Inputs>
                <Column SourceColumn="data_schema_id" TargetColumn="data_schema_id"  />
                <Column SourceColumn="data_object_type_id" TargetColumn="data_object_type_id"  />
                <Column SourceColumn="name" TargetColumn="name"  />
              </Inputs>

              <InputPath OutputPathName="Lookup Data Object Type.Match"></InputPath>
            </Lookup>
            
            <OleDbDestination Name="SSISDB" ConnectionName="SSISDB" UseFastLoadIfAvailable="true">
              <InputPath OutputPathName="Lookup Existing.NoMatch"></InputPath>
              <ExternalTableOutput Table="[semanticinsight].[data_object]"></ExternalTableOutput>
            </OleDbDestination>

          </Transformations>
        </Dataflow>

        <Dataflow Name="Bulk OLEDB AdventureWorks Attributes Metadata">
          <Transformations>
            
            <OleDbSource Name="<#=componentApplicationName#> Attributes" ConnectionName="<#=connectionName#>">
              <DirectInput>
                
	              select
					  component_application_name = cast('<#=componentApplicationName#>' as nvarchar(50)),
		              [database]				 = DB_NAME(),
					  data_object_type			 = cast('Table' as nvarchar(50)),
		              data_object_name			 = cast(t.name as nvarchar(132)),
		              data_object_schema		 = cast(s.name as nvarchar(132)),			
		              data_object_datatype		 = cast(coalesce(bt.name,dt.name) as nvarchar(132)),
		              name						 = cast(c.name as nvarchar(132)),
		              c.max_length,
		              c.precision,
		              c.scale,
		              C.is_nullable,
		              is_key					 = cast(iif(isnull(unq.UniqueConstraintCount, 0) > 0, 1, 0) as bit)
	              from sys.schemas s
	              join sys.tables t on s.schema_id = t.schema_id
	              join sys.columns c on t.object_id = c.object_id
				  join sys.types dt	on c.system_type_id = dt.system_type_id and c.user_type_id = dt.user_type_id
				  left join sys.types bt on dt.is_user_defined = 1 and bt.is_user_defined = 0 and dt.system_type_id = bt.system_type_id and dt.user_type_id &lt;&gt; bt.user_type_id and bt.name &lt;&gt; 'sysname'
	              left join  (
		              select count(distinct i.index_id) as UniqueConstraintCount, i.object_id, ic.column_id
		              from  sys.indexes i
		              join  sys.index_columns ic	on i.index_id = ic.index_id		and i.object_id = ic.object_id
		              join  sys.columns c1		on c1.column_id = ic.column_id	and c1.object_id = i.object_id
		              where ((is_unique = 1 and ignore_dup_key = 0) or is_primary_key = 1 or is_unique_constraint = 1)
		              group by i.object_id, ic.column_id
	              ) unq on c.column_id = unq.column_id and c.object_id = unq.object_id
	              where dt.name &lt;&gt; 'sysname'

	              union all

	              select
					  component_application_name = cast('<#=componentApplicationName#>' as nvarchar(50)),
		              [database]				 = DB_NAME(),
					  data_object_type			 = cast('View' as nvarchar(50)),
		              data_object_name			 = cast(t.name as nvarchar(132)),
		              data_object_schema		 = cast(s.name as nvarchar(132)),			
		              data_object_datatype		 = cast(coalesce(bt.name,dt.name) as nvarchar(132)),
		              name						 = cast(c.name as nvarchar(132)),
		              c.max_length,
		              c.precision,
		              c.scale,
		              C.is_nullable,
		              is_key					 = cast(iif(isnull(unq.UniqueConstraintCount, 0) > 0, 1, 0) as bit)
	              from sys.schemas s
	              join sys.views t on s.schema_id = t.schema_id
	              join sys.columns c on t.object_id = c.object_id
				  join sys.types dt	on c.system_type_id = dt.system_type_id and c.user_type_id = dt.user_type_id
				  left join sys.types bt on dt.is_user_defined = 1 and bt.is_user_defined = 0 and dt.system_type_id = bt.system_type_id and dt.user_type_id &lt;&gt; bt.user_type_id and bt.name &lt;&gt; 'sysname'
	              left join  (
		              select count(distinct i.index_id) as UniqueConstraintCount, i.object_id, ic.column_id
		              from  sys.indexes i
		              join  sys.index_columns ic	on i.index_id = ic.index_id		and i.object_id = ic.object_id
		              join  sys.columns c1		on c1.column_id = ic.column_id	and c1.object_id = i.object_id
		              where ((is_unique = 1 and ignore_dup_key = 0) or is_primary_key = 1 or is_unique_constraint = 1)
		              group by i.object_id, ic.column_id
	              ) unq on c.column_id = unq.column_id and c.object_id = unq.object_id
	              where dt.name &lt;&gt; 'sysname'
				  
				  <!-- need to add proc scraping -->
              </DirectInput>
            </OleDbSource>
			  
            <Lookup Name="Lookup Data Type" CacheConnectionName="SSISDB" NoMatchBehavior="FailComponent" >
              <DirectInput>
select data_type_id, sql_server from semanticinsight.data_type
              </DirectInput>
              <Inputs>
                <Column SourceColumn="data_object_datatype" TargetColumn="sql_server"  />
              </Inputs>
              <Outputs>
                <Column SourceColumn="data_type_id" TargetColumn="data_type_id" />
              </Outputs>
              <InputPath OutputPathName="<#=componentApplicationName#> Attributes.Output"></InputPath>
            </Lookup>
			  
            <Lookup Name="Lookup Data Object" CacheConnectionName="SSISDB" NoMatchBehavior="RedirectRowsToNoMatchOutput" >
              <DirectInput>
select
	do.data_object_id,
	do.name,
	ds.[schema_name],
	ds.database_name,
	dot.data_object_type
from semanticinsight.data_object do
join semanticinsight.data_schema ds on do.data_schema_id = ds.data_schema_id
join semanticinsight.system_component sc on ds.system_component_id = sc.system_component_id
join semanticinsight.data_object_type dot on do.data_object_type_id = dot.data_object_type_id
join semanticinsight.system_component rsc on rsc.system_component_id = sc.root_system_component_id
where sc.component_application_name = '<#=componentApplicationName#>' and rsc.component_application_name = '<#=rootComponentApplicationName#>'
              </DirectInput>
              <Inputs>
                <Column SourceColumn="database" TargetColumn="database_name"  />
                <Column SourceColumn="data_object_type" TargetColumn="data_object_type"  />
				<Column SourceColumn="data_object_name" TargetColumn="name"  />
                <Column SourceColumn="data_object_schema" TargetColumn="schema_name"  />
              </Inputs>
              <Outputs>
                <Column SourceColumn="data_object_id" TargetColumn="data_object_id" />
              </Outputs>
              <InputPath OutputPathName="Lookup Data Type.Match"></InputPath>
            </Lookup>

			<Lookup Name="Lookup Existing" CacheConnectionName="SSISDB" NoMatchBehavior="RedirectRowsToNoMatchOutput" >
              <DirectInput>
select do.data_object_id, da.name 
from semanticinsight.data_attribute da
join semanticinsight.data_object do on do.data_object_id = da.data_object_id
join semanticinsight.data_schema ds on do.data_schema_id = ds.data_schema_id
join semanticinsight.system_component sc on ds.system_component_id = sc.system_component_id
join semanticinsight.system_component rsc on rsc.system_component_id = sc.root_system_component_id
where sc.component_application_name = '<#=componentApplicationName#>' and rsc.component_application_name = '<#=rootComponentApplicationName#>'
              </DirectInput>
              <Inputs>
                <Column SourceColumn="data_object_id" TargetColumn="data_object_id"  />
                <Column SourceColumn="name" TargetColumn="name"  />
              </Inputs>
              <InputPath OutputPathName="Lookup Data Object.Match"></InputPath>
            </Lookup>
			

            <OleDbDestination Name="SSISDB" ConnectionName="SSISDB" UseFastLoadIfAvailable="true">
              <InputPath OutputPathName="Lookup Existing.NoMatch"></InputPath>
              <ExternalTableOutput Table="[semanticinsight].[data_attribute]"></ExternalTableOutput>
            </OleDbDestination>
            
          </Transformations>
        </Dataflow>

      </Tasks>
      <Connections>
            <# 
                string[] cn = new string[] {"Adventure Works","SSISDB"};
                var connections = RootNode.Connections.Where(x => cn.Contains(x.Name));
            #>
            <# foreach(var connection in connections) {#>
            <Connection ConnectionName="<#=connection.Name#>" Id="<#=connection.GetTag("GUID")#>"></Connection>
            <#}#>
      </Connections>
    </Package>
  </Packages>
</Biml>